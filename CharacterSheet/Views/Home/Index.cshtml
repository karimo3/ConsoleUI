@model Characters
<div class="row">
    <div class="col">
        <h1>Hello world!</h1>
    </div>
</div>
<div class="row">

    <section class="col">
        <h3 class="shadow rounded">ASP.NET Core</h3>
        <p>
            The latest web development framework from Microsoft is ASP.NET Core.
            It is blazingly fast, cross-platform, and cloud-ready. Microsoft has done groundbreaking redesigns to ASP.NET Core and so lots of new concepts were introduced along with it.
            In this course, we’ll take a look at them while creating a website from scratch. In this video course, you’ll learn how to do the basic setup for the project, and then we’ll take a dive into the concept of the MVC pattern.
            You’ll learn about models, views, and controllers in detail. You will see the new concept of middleware and it will be demystified. Dependency Injection (DI) is now native to ASP.NET Core MVC and comes already wired up.
            You will learn to use DI with ease. Routing is central to ASP.NET Core MVC and there is a dedicated section for learning all that you need to know so that you can create effective routing for your site.
            We’ll discuss the Razor syntax for UI programming and work with the Entity Framework core and create a Database in the SQLLocalDb which is the new developer friendly Database server around in the block.
            Just relax and watch this video as this course will take you inside the world of ASP.NET Core MVC and learn effortlessly all the critical and complex concepts without breaking any sweat. ASP.NET core MVC is made fun and easy here.
            Tackle any projects armed with the knowledge gained from this course with confidence.
        </p>
    </section>

    <section class="col-md-9">
        <h3 class="shadow rounded">What is the MVC pattern?</h3>
        <p>
            The Model-View-Controller (MVC) architectural pattern separates an application into three main groups of components: Models, Views, and Controllers.
            This pattern helps to achieve separation of concerns. Using this pattern, user requests are routed to a Controller which is responsible for working with the Model to perform user actions and/or retrieve results of queries.
            The Controller chooses the View to display to the user, and provides it with any Model data it requires.
        </p>
        <p class="row">
            <div class="col-md-6"><img src="~/img/mvc.png" alt="MVC Pattern" class="img-fluid img-thumbnail" /></div>
            <div class="col-md-9"><img src="~/img/asp-net-core-logo.png" alt="asp-net-core-logo" class="img-fluid img-thumbnail" /></div>
            <div class="col-md-6"><img src="~/img/dotnet.png" alt="dotnet-pic" class="img-fluid img-thumbnail" /></div>
        </p>
    </section>

    <section class="col">
        <h3 class="shadow rounded">Views with Razor</h3>
        <p>
            Views help to establish separation of concerns within an MVC app by separating the user interface markup from other parts of the app. Following SoC design makes your app modular, which provides several benefits:

            <ul>
                <li>The app is easier to maintain because it's better organized. Views are generally grouped by app feature. This makes it easier to find related views when working on a feature.</li>
                <li>
                    The parts of the app are loosely coupled. You can build and update the app's views separately from the business logic and data access components.
                    You can modify the views of the app without necessarily having to update other parts of the app.
                </li>
                <li>It's easier to test the user interface parts of the app because the views are separate units.</li>
                <li>Due to better organization, it's less likely that you'll accidentally repeat sections of the user interface.</li>
            </ul>
        </p>
    </section>
</div>

